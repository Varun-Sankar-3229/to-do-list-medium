{"version":3,"sources":["addTask.js","activeTask.js","App.js","serviceWorker.js","index.js"],"names":["AddTask","state","task","newTask","_this","length","props","document","getElementById","value","setState","inputValue","e","target","react_default","a","createElement","className","type","id","placeholder","name","onChange","this","onClick","Component","ActiveTasks","_ref","tasks","completeT","update","del","arrayList","map","taskList","status","key","App","activeTasks","idCount","total","active","complete","addTask","newList","concat","Object","toConsumableArray","newIdCount","newTotal","val","deleteTask","window","confirm","filter","taskTotal","defineProperty","completeTask","curTask","console","log","updateTask","mod","prompt","findIndex","index","modList","removeAll","removeTask","remove","len","compTotal","localStorage","getItem","JSON","parse","nextProps","nextState","setItem","stringify","activeTask","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6bd6d205.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass AddTask extends Component{\r\n    \r\n    state = {\r\n        task: ''//,\r\n        //status: 'active'\r\n    }\r\n\r\n    newTask = () => {\r\n        if(this.state.task.length>0){\r\n            this.props.task(this.state);\r\n            document.getElementById('addInput').value = '';\r\n            this.setState({\r\n                task: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    inputValue = (e) => {\r\n        this.setState({\r\n            task: e.target.value\r\n        });\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n        \r\n        return(\r\n            <div className=\"newTask input-group\">\r\n                <input type=\"text\" className=\"form-control\" id=\"addInput\" placeholder=\"Add a task\" name=\"newTask\" onChange={this.inputValue}/>\r\n                <div className=\"input-group-append\">\r\n                <button onClick={this.newTask} className=\"btn btn-outline-primary\">Add</button>\r\n                </div>                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\n\r\n\r\n\r\nconst ActiveTasks = ({tasks,completeT,update,del}) => {\r\n    \r\n    const arrayList = tasks.map(taskList => {\r\n        \r\n        if(taskList.status === \"active\"){ \r\n        return(\r\n            <tr className=\"list-group-item\" key={taskList.id}>\r\n                <td className=\"left-t\">\r\n                <span className=\"align-left\" id={taskList.id} onClick={() => update(taskList.id,taskList.task)}>{taskList.task}</span>\r\n                </td>\r\n                <td className=\"right\">\r\n                <span className=\"btn-group\">\r\n                    <button onClick={() => {completeT(taskList.id)}} className=\"btn btn-success\">Complete</button>\r\n                    <button onClick={() => {del(taskList.id,taskList.status)}} className=\"btn btn-danger\">Delete</button>\r\n                </span>\r\n                </td>\r\n            </tr>\r\n         )\r\n        }\r\n        else{\r\n            return(\r\n                <tr className=\"task list-group-item\" key={taskList.id}>\r\n                    <td className=\"left-t\">\r\n                        <span className=\"align-left\" id={taskList.id}><del>{taskList.task}</del></span>\r\n                    </td>\r\n                    <td className=\"right\">\r\n                        <span className=\"btn-group\">\r\n                        <button onClick={() => {completeT(taskList.id)}} className=\"btn btn-dark\">Uncomplete</button>\r\n                        <button onClick={() => {del(taskList.id,taskList.status)}} className=\"btn btn-danger\">Delete</button>\r\n                        </span>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        } \r\n     });\r\n\r\n\r\n    if(arrayList.length !== 0){\r\n        return(\r\n            arrayList\r\n        );\r\n    }\r\n     \r\n    else{\r\n        return(\r\n            <tr className=\"list-group-item\">\r\n                <td>There are no existing tasks.</td>\r\n            </tr>\r\n        );\r\n    }\r\n     \r\n    \r\n}\r\n\r\nexport default ActiveTasks;","import React, { Component } from 'react';\nimport './App.css';\nimport AddTask from './addTask.js';\nimport ActiveTasks from './activeTask.js';\n\nclass App extends Component {\n  state = {\n    activeTasks: [],\n      idCount: 0,\n      total: 0,\n      active: 0,\n      complete: 0\n  }\n\n  componentWillMount(){\n    localStorage.getItem('activeTasks') && localStorage.getItem('idcount') && \n    localStorage.getItem('total') && localStorage.getItem('active') && \n    localStorage.getItem('complete') && this.setState({\n      activeTasks: JSON.parse(localStorage.getItem('activeTasks')),\n      idCount: JSON.parse(localStorage.getItem('idcount')),\n      total: JSON.parse(localStorage.getItem('total')),\n      active: JSON.parse(localStorage.getItem('active')),\n      complete: JSON.parse(localStorage.getItem('complete'))\n    })\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    localStorage.setItem('activeTasks', JSON.stringify(nextState.activeTasks));\n    localStorage.setItem('idcount', nextState.idCount);\n    localStorage.setItem('total', nextState.total);\n    localStorage.setItem('active', nextState.active);\n    localStorage.setItem('complete', nextState.complete);\n  }\n\n  addTask = (task) =>{\n    task.id = this.state.idCount+1;\n    task.status = 'active';\n    let newList = [task,...this.state.activeTasks];\n    let newIdCount = this.state.idCount+1;\n    let newTotal = this.state.total+1;\n    let val = 0;\n    if(task.status===\"active\"){\n      val = this.state.active+1;\n      this.setState({\n        activeTasks: newList,\n        idCount: newIdCount,\n        total: newTotal,\n        active: val\n      });\n    }\n    else{\n      val = this.state.complete+1;\n      this.setState({\n        activeTasks: newList,\n        idCount: newIdCount,\n        total: newTotal,\n        complete: val\n      });\n    }\n  }\n\n  deleteTask = (id,status) =>{\n    if(window.confirm(\"Are you sure if you want to delete the task?\")){\n      let newList = this.state.activeTasks.filter(active => {\n        return active.id !== id\n      });\n      let taskTotal = 0;\n      let newTotal = this.state.total-1;\n      if(status === \"active\")\n        taskTotal = this.state.active-1;\n      else\n        taskTotal = this.state.complete-1;\n\n      this.setState({\n        activeTasks: newList,\n        total: newTotal,\n        [status]: taskTotal\n      });\n    }\n  }\n\n  completeTask = (id) =>{\n    let curTask = this.state.activeTasks.filter(active => {\n      return active.id === id\n    });\n\n    let newList = this.state.activeTasks.filter(active => {\n      return active.id !== id\n    });\n\n    \n    let val = [0,0];\n\n    if(curTask[0].status === \"active\"){\n      curTask[0].status = \"complete\";\n      val[0] = this.state.active-1;\n      val[1] = this.state.complete+1;\n      this.setState({\n        active: val[0],\n        complete: val[1]\n      });\n      newList = [...newList,curTask[0]];\n    }\n    \n    else{\n      curTask[0].status = \"active\";\n      val[0] = this.state.complete-1;\n      val[1] = this.state.active+1;\n      this.setState({\n        complete: val[0],\n        active: val[1]\n      });\n      newList = [curTask[0],...newList];\n    }\n    \n\n    //newList = [...newList,curTask[0]];\n\n    console.log(curTask[0]);\n    //console.log(newList);\n    this.setState({\n      activeTasks: newList\n    });\n  }\n\n  updateTask = (id,task) =>{\n    let mod = window.prompt(\"Please update the task\",task);\n    if(mod){\n       // document.getElementById(id).innerHTML = mod;\n       let update = this.state.activeTasks.findIndex(index =>{\n         return index.id === id\n        });\n\n        let modList = this.state.activeTasks;\n        modList[update].task = mod;\n        this.setState({\n          activeTasks: modList\n        });\n    }\n  }\n\n  removeAll = () =>{\n    if(this.state.complete>0 && window.confirm(\"Are you sure if you want to delete all completed tasks?\")){\n      let removeTask = this.state.activeTasks.filter(remove => {\n        return remove.status !== \"complete\"\n      });\n      let len = this.state.activeTasks.length-removeTask.length;\n      console.log(removeTask);\n      let newTotal = this.state.total-len;\n      let compTotal = this.state.complete-len;\n      this.setState({\n        activeTasks: removeTask,\n        total: newTotal,\n        complete: compTotal\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1>To Do List</h1>\n        <div className=\"alert alert-info\">Note: Click on text of Active Tasks to edit.</div>\n        <div className=\"alert alert-secondary\"><span>Total tasks: {this.state.total} | </span><span>Active tasks: {this.state.active} | </span><span>Completed tasks: {this.state.complete} </span></div>\n        \n        <AddTask task={this.addTask}/>\n\n        <h2>Existing Tasks</h2>\n        <ul className=\"list-group\">\n        <table><tbody>\n        <ActiveTasks tasks={this.state.activeTasks} completeT={this.completeTask} update={this.updateTask} del={this.deleteTask}/>\n        \n        </tbody></table>\n        </ul>\n        <button onClick={this.removeAll} className=\"btn btn-danger remove-btn\">Remove all Completed Tasks</button>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}